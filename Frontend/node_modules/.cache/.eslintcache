[{"/home/lowelodev/IdeaProjects/StudentHub/src/index.js":"1","/home/lowelodev/IdeaProjects/StudentHub/src/reportWebVitals.js":"2","/home/lowelodev/IdeaProjects/StudentHub/src/CoreComponents/AppComponent.js":"3","/home/lowelodev/IdeaProjects/StudentHub/src/CoreComponents/NavBarComponent.js":"4","/home/lowelodev/IdeaProjects/StudentHub/src/CoreComponents/Themes.js":"5","/home/lowelodev/IdeaProjects/StudentHub/src/CoreComponents/Routing.js":"6","/home/lowelodev/IdeaProjects/StudentHub/src/AboutMe.js":"7","/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/FileManagerComponent.js":"8","/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/Repository.js":"9","/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/DirectoryComponent.js":"10","/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/Folder.js":"11","/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/GithubAPICore.js":"12"},{"size":542,"mtime":1624017925808,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1624017925808,"results":"15","hashOfConfig":"14"},{"size":612,"mtime":1624017925808,"results":"16","hashOfConfig":"14"},{"size":884,"mtime":1624017925808,"results":"17","hashOfConfig":"14"},{"size":925,"mtime":1624017925808,"results":"18","hashOfConfig":"14"},{"size":608,"mtime":1624017925808,"results":"19","hashOfConfig":"14"},{"size":736,"mtime":1624017925808,"results":"20","hashOfConfig":"14"},{"size":750,"mtime":1624017925808,"results":"21","hashOfConfig":"14"},{"size":1009,"mtime":1624017925808,"results":"22","hashOfConfig":"14"},{"size":4001,"mtime":1624021105016,"results":"23","hashOfConfig":"14"},{"size":327,"mtime":1624017925808,"results":"24","hashOfConfig":"14"},{"size":1954,"mtime":1631898889318,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"bo4d39",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},"/home/lowelodev/IdeaProjects/StudentHub/src/index.js",[],["56","57"],"/home/lowelodev/IdeaProjects/StudentHub/src/reportWebVitals.js",[],"/home/lowelodev/IdeaProjects/StudentHub/src/CoreComponents/AppComponent.js",[],"/home/lowelodev/IdeaProjects/StudentHub/src/CoreComponents/NavBarComponent.js",[],"/home/lowelodev/IdeaProjects/StudentHub/src/CoreComponents/Themes.js",[],"/home/lowelodev/IdeaProjects/StudentHub/src/CoreComponents/Routing.js",["58"],"import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport AboutMe from \"../AboutMe\";\nimport FileManagerComponent from \"../StudentHub/FileManagerComponent\";\nimport SwipeableRoutes from \"react-swipeable-routes\";\n\nexport default class Routing extends React.Component {\n    render() {\n        return (\n            <SwipeableRoutes>\n                <Route path=\"/about\">\n                    <AboutMe/>\n                </Route>\n                <Route path=\"/studenthub\">\n                    <FileManagerComponent/>\n                </Route>\n            </SwipeableRoutes>\n        );\n    }\n}\n","/home/lowelodev/IdeaProjects/StudentHub/src/AboutMe.js",[],"/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/FileManagerComponent.js",["59"],"import React from \"react\";\nimport DirectoryComponent from \"./DirectoryComponent\";\nimport Repository from \"./Repository\";\n\nclass FileManagerComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const git = new Repository(\"\", \"LoweloDev\");\n\n        git.getFoldersWithChild(\"University\", \"\")\n            .then(item => {\n                this.setState(item.reduce((acc,currItem) => (acc[currItem.name]= currItem, acc),{}))\n            })\n    }\n\n    render() {\n        if (this.state !== null) {\n        return (\n            <DirectoryComponent state={this.state}/>\n        );\n        } else {\n            return <div>Loading ... / Github API Limit reached</div>\n        }\n    }\n}\n\nexport default FileManagerComponent;","/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/Repository.js",["60"],"import GithubAPICore from \"./GithubAPICore\";\nimport Folder from \"./Folder\";\n\nclass Repository extends GithubAPICore {\n    \n    async getFolders(repository, path) {\n        const promise = await this.getContents(repository, path);\n        return promise.map(item => {\n            if (item.type === \"dir\")\n                return new Folder(item.name, item.type, item.html_url, `https://download-directory.github.io/?url=${item.html_url}`)\n            })\n            .filter(item => item !== undefined);\n    }\n\n    async getFoldersWithChild(repository, path) {\n        let folders = await this.getContents(repository, path);\n        folders = await Promise.all(folders.map(async item => {\n            if (item.type === \"dir\")\n                return new Folder(item.name, item.type, item.html_url, `https://download-directory.github.io/?url=${item.html_url}`, await this.getFolders(repository, item.name))\n        }))\n        return folders.filter(item => item !== undefined);\n    }\n}\n\nexport default Repository;\n","/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/DirectoryComponent.js",["61"],"import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport {IconButton, InputBase, ListItemSecondaryAction} from \"@material-ui/core\";\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport {withRouter} from \"react-router-dom\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport SearchIcon from '@material-ui/icons/Search'\nimport Fuse from 'fuse.js';\n\nclass DirectoryComponent extends React.Component {\n    didMount = false;\n    localPrimaryColor = \"primary\";\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            state: props.state,\n            depth: 0\n        };\n    }\n\n    openFolder(jsonObj, entryName) {\n        this.setState({\n            state: jsonObj[entryName].child,\n            depth: this.state.depth + 1\n        });\n    }\n\n    generateListItems(jsonObj) {\n        return Object.entries(jsonObj).map(([key, value]) => {\n            return (\n                <ListItem button onClick={() => jsonObj[value.name] && this.openFolder(jsonObj, key)}>\n                    <ListItemIcon>\n                        {(value.type === \"dir\") && <FolderIcon color={this.localPrimaryColor}/>}\n                    </ListItemIcon>\n                    <ListItemText color={this.localPrimaryColor} primary={value.name} secondary={(value.type !== \"dir\") && value.type}/>\n                    <ListItemSecondaryAction>\n                        <IconButton color={this.localPrimaryColor} href={value.download_url}>\n                            <CloudDownloadIcon/>\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            );\n        })\n    }\n\n    fuseSearch(list, search) {\n        const options = {\n            includeScore: true,\n            keys: ['name', 'type', 'html_url', 'child.name', 'child.type', 'child.html_url']\n        }\n\n        const fuse = new Fuse(list, options)\n\n        if (search === \"\") return this.props.state;\n\n        return fuse.search(search).map(item => {\n            return {\n                name: item.item.name,\n                download_url: item.item.download_url,\n                html_url: item.item.html_url,\n                type: item.item.type,\n                child: item.item.child\n            }\n        }).reduce((acc, currItem) => (acc[currItem.name] = currItem, acc), {});\n    }\n\n    render() {\n        if(this.state.state !== null) {\n            // this.fuseSearch(Object.values(this.state.state), \"1. Semester\");\n        }\n        return (\n            <List>\n                <ListItem>\n                    <ListItemIcon>\n                        <SearchIcon color={this.localPrimaryColor}/>\n                    </ListItemIcon>\n                    <InputBase\n                        color={this.localPrimaryColor}\n                        placeholder=\"Searchâ€¦\"\n                        onChange={(search) => {\n                            // this.fuseSearch(Object.values(this.state.state), search.target.value)\n                            this.setState({\n                                state: this.fuseSearch(Object.values(this.props.state), search.target.value)\n                            })\n                        }}\n                    />\n                </ListItem>\n                {this.state.depth > 0 &&\n                <ListItem button onClick={() => this.setState({\n                    state: this.props.state,\n                    depth: this.state.depth - 1\n                })}>\n                    <ListItemIcon>\n                    <ArrowBackIcon color={this.localPrimaryColor}/>\n                    </ListItemIcon>\n                </ListItem>}\n                {this.generateListItems(this.state.state)}\n            </List>\n        );\n    }\n\n}\n\nexport default withRouter(DirectoryComponent);","/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/Folder.js",[],"/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/GithubAPICore.js",["62"],"class GithubAPICore {\n    user;\n    auth = {Authorization: \"\"};\n    methods = {\n        GET: {\n            method: \"GET\",\n        },\n        POST: {\n            method: \"POST\",\n        }\n    }\n\n    constructor(token, user) {\n        this.auth.Authorization = token;\n        this.user = user;\n    }\n\n    async getRepos() {\n        // const promise = await fetch(\"https://api.github.com/users/\" + this.user + \"/repos\", this.methods.GET);\n        const promise = await fetch(`https://api.github.com/users/${this.user}/repos`, this.methods.GET);\n\n        return promise.json();\n    }\n\n    async getCommits(repository) {\n        // const promise = await fetch(\"https://api.github.com/repos/LoweloDev/\" + repository + \"/commits\", this.methods.GET);\n        const promise = await fetch(`https://api.github.com/repos/${this.user}/${repository}/commits`, this.methods.GET);\n\n        return promise.json();\n    }\n\n    async getLatestCommitOfBranch(repository, branch) {\n        const promise = await fetch(`https://api.github.com/repos/${this.user}/${repository}/commits/${branch}`, this.methods.GET);\n\n        return promise.json();\n    }\n\n    async getFileTree(repository) {\n        const latestCommit = await this.getLatestCommitOfBranch(repository, \"university_protected\");\n        const latestCommitSha = latestCommit.commit.tree.sha;\n\n        // https://api.github.com/repos/{username}/{repoName}/trees/{latestCommitSha}\n        const promise = await fetch(`https://api.github.com/repos/${this.user}/${repository}/git/trees/${latestCommitSha}`, this.methods.GET);\n        console.log(promise);\n        return promise.json();\n    }\n\n    async getContents(repository, path) {\n        let ft = await this.getFileTree(repository);\n        const promise = await fetch(`https://api.github.com/repos/${this.user}/${repository}/contents/${path}`, this.methods.GET);\n        console.log(promise);\n        return promise.json();\n    }\n}\n\nexport default GithubAPICore;\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":2,"column":16,"nodeType":"69","messageId":"70","endLine":2,"endColumn":22},{"ruleId":"71","severity":1,"message":"72","line":13,"column":90,"nodeType":"73","messageId":"74","endLine":13,"endColumn":91},{"ruleId":"75","severity":1,"message":"76","line":8,"column":33,"nodeType":"77","messageId":"78","endLine":8,"endColumn":35},{"ruleId":"71","severity":1,"message":"72","line":69,"column":68,"nodeType":"73","messageId":"74","endLine":69,"endColumn":69},{"ruleId":"67","severity":1,"message":"79","line":49,"column":13,"nodeType":"69","messageId":"70","endLine":49,"endColumn":15},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'ft' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]