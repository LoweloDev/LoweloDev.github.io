{"ast":null,"code":"import GithubAPICore from \"./GithubAPICore\";\nimport Folder from \"./Folder\";\n\nclass Repository extends GithubAPICore {\n  async getFolders(repository, path) {\n    const promise = await this.getContents(repository, path);\n    return promise.map(item => {\n      if (item.type === \"dir\") return new Folder(item.name, item.type, item.html_url, `https://download-directory.github.io/?url=${item.html_url}`);\n    }).filter(item => item !== undefined);\n  }\n\n  async getFoldersWithChild(repository, path) {\n    let folders = await this.getContents(repository, path);\n    folders = await Promise.all(folders.map(async item => {\n      if (item.type === \"dir\") return new Folder(item.name, item.type, item.html_url, `https://download-directory.github.io/?url=${item.html_url}`, await this.getFolders(repository, item.name));\n    }));\n    return folders.filter(item => item !== undefined);\n  }\n\n}\n\nexport default Repository;","map":{"version":3,"sources":["/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/Repository.js"],"names":["GithubAPICore","Folder","Repository","getFolders","repository","path","promise","getContents","map","item","type","name","html_url","filter","undefined","getFoldersWithChild","folders","Promise","all"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAN,SAAyBF,aAAzB,CAAuC;AAEnB,QAAVG,UAAU,CAACC,UAAD,EAAaC,IAAb,EAAmB;AAC/B,UAAMC,OAAO,GAAG,MAAM,KAAKC,WAAL,CAAiBH,UAAjB,EAA6BC,IAA7B,CAAtB;AACA,WAAOC,OAAO,CAACE,GAAR,CAAYC,IAAI,IAAI;AACvB,UAAIA,IAAI,CAACC,IAAL,KAAc,KAAlB,EACI,OAAO,IAAIT,MAAJ,CAAWQ,IAAI,CAACE,IAAhB,EAAsBF,IAAI,CAACC,IAA3B,EAAiCD,IAAI,CAACG,QAAtC,EAAiD,6CAA4CH,IAAI,CAACG,QAAS,EAA3G,CAAP;AACH,KAHE,EAIFC,MAJE,CAIKJ,IAAI,IAAIA,IAAI,KAAKK,SAJtB,CAAP;AAKH;;AAEwB,QAAnBC,mBAAmB,CAACX,UAAD,EAAaC,IAAb,EAAmB;AACxC,QAAIW,OAAO,GAAG,MAAM,KAAKT,WAAL,CAAiBH,UAAjB,EAA6BC,IAA7B,CAApB;AACAW,IAAAA,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACR,GAAR,CAAY,MAAMC,IAAN,IAAc;AAClD,UAAIA,IAAI,CAACC,IAAL,KAAc,KAAlB,EACI,OAAO,IAAIT,MAAJ,CAAWQ,IAAI,CAACE,IAAhB,EAAsBF,IAAI,CAACC,IAA3B,EAAiCD,IAAI,CAACG,QAAtC,EAAiD,6CAA4CH,IAAI,CAACG,QAAS,EAA3G,EAA8G,MAAM,KAAKT,UAAL,CAAgBC,UAAhB,EAA4BK,IAAI,CAACE,IAAjC,CAApH,CAAP;AACP,KAH2B,CAAZ,CAAhB;AAIA,WAAOK,OAAO,CAACH,MAAR,CAAeJ,IAAI,IAAIA,IAAI,KAAKK,SAAhC,CAAP;AACH;;AAlBkC;;AAqBvC,eAAeZ,UAAf","sourcesContent":["import GithubAPICore from \"./GithubAPICore\";\nimport Folder from \"./Folder\";\n\nclass Repository extends GithubAPICore {\n    \n    async getFolders(repository, path) {\n        const promise = await this.getContents(repository, path);\n        return promise.map(item => {\n            if (item.type === \"dir\")\n                return new Folder(item.name, item.type, item.html_url, `https://download-directory.github.io/?url=${item.html_url}`)\n            })\n            .filter(item => item !== undefined);\n    }\n\n    async getFoldersWithChild(repository, path) {\n        let folders = await this.getContents(repository, path);\n        folders = await Promise.all(folders.map(async item => {\n            if (item.type === \"dir\")\n                return new Folder(item.name, item.type, item.html_url, `https://download-directory.github.io/?url=${item.html_url}`, await this.getFolders(repository, item.name))\n        }))\n        return folders.filter(item => item !== undefined);\n    }\n}\n\nexport default Repository;\n"]},"metadata":{},"sourceType":"module"}