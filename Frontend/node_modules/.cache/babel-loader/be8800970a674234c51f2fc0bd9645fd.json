{"ast":null,"code":"import _regeneratorRuntime from\"/home/lowelodev/IdeaProjects/StudentHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/lowelodev/IdeaProjects/StudentHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/lowelodev/IdeaProjects/StudentHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/lowelodev/IdeaProjects/StudentHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var GithubAPICore=/*#__PURE__*/function(){function GithubAPICore(token,user){_classCallCheck(this,GithubAPICore);this.auth={Authorization:\"\"};this.methods={GET:{method:\"GET\"},POST:{method:\"POST\"}};this.auth.Authorization=token;this.user=user;}_createClass(GithubAPICore,[{key:\"getRepos\",value:function(){var _getRepos=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var promise;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://api.github.com/users/\".concat(this.user,\"/repos\"),this.methods.GET);case 2:promise=_context.sent;return _context.abrupt(\"return\",promise.json());case 4:case\"end\":return _context.stop();}}},_callee,this);}));function getRepos(){return _getRepos.apply(this,arguments);}return getRepos;}()},{key:\"getCommits\",value:function(){var _getCommits=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(repository){var promise;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch(\"https://api.github.com/repos/\".concat(this.user,\"/\").concat(repository,\"/commits\"),this.methods.GET);case 2:promise=_context2.sent;return _context2.abrupt(\"return\",promise.json());case 4:case\"end\":return _context2.stop();}}},_callee2,this);}));function getCommits(_x){return _getCommits.apply(this,arguments);}return getCommits;}()},{key:\"getLatestCommitOfBranch\",value:function(){var _getLatestCommitOfBranch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(repository,branch){var promise;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return fetch(\"https://api.github.com/repos/\".concat(this.user,\"/\").concat(repository,\"/commits/\").concat(branch),this.methods.GET);case 2:promise=_context3.sent;return _context3.abrupt(\"return\",promise.json());case 4:case\"end\":return _context3.stop();}}},_callee3,this);}));function getLatestCommitOfBranch(_x2,_x3){return _getLatestCommitOfBranch.apply(this,arguments);}return getLatestCommitOfBranch;}()},{key:\"getFileTree\",value:function(){var _getFileTree=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(repository){var latestCommit,latestCommitSha,promise;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return this.getLatestCommitOfBranch(repository,\"university_protected\");case 2:latestCommit=_context4.sent;latestCommitSha=latestCommit.commit.tree.sha;// https://api.github.com/repos/{username}/{repoName}/trees/{latestCommitSha}\n_context4.next=6;return fetch(\"https://api.github.com/repos/\".concat(this.user,\"/\").concat(repository,\"/git/trees/\").concat(latestCommitSha),this.methods.GET);case 6:promise=_context4.sent;return _context4.abrupt(\"return\",promise.json());case 8:case\"end\":return _context4.stop();}}},_callee4,this);}));function getFileTree(_x4){return _getFileTree.apply(this,arguments);}return getFileTree;}()},{key:\"getContents\",value:function(){var _getContents=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(repository,path){var promise;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return fetch(\"https://api.github.com/repos/\".concat(this.user,\"/\").concat(repository,\"/contents/\").concat(path),this.methods.GET);case 2:promise=_context5.sent;return _context5.abrupt(\"return\",promise.json());case 4:case\"end\":return _context5.stop();}}},_callee5,this);}));function getContents(_x5,_x6){return _getContents.apply(this,arguments);}return getContents;}()}]);return GithubAPICore;}();export default GithubAPICore;","map":{"version":3,"sources":["/home/lowelodev/IdeaProjects/StudentHub/src/StudentHub/GithubAPICore.js"],"names":["GithubAPICore","token","user","auth","Authorization","methods","GET","method","POST","fetch","promise","json","repository","branch","getLatestCommitOfBranch","latestCommit","latestCommitSha","commit","tree","sha","path"],"mappings":"snBAAMA,CAAAA,a,yBAYF,uBAAYC,KAAZ,CAAmBC,IAAnB,CAAyB,0CAVzBC,IAUyB,CAVlB,CAACC,aAAa,CAAE,EAAhB,CAUkB,MATzBC,OASyB,CATf,CACNC,GAAG,CAAE,CACDC,MAAM,CAAE,KADP,CADC,CAINC,IAAI,CAAE,CACFD,MAAM,CAAE,MADN,CAJA,CASe,CACrB,KAAKJ,IAAL,CAAUC,aAAV,CAA0BH,KAA1B,CACA,KAAKC,IAAL,CAAYA,IAAZ,CACH,C,mIAED,qKAE0BO,CAAAA,KAAK,wCAAiC,KAAKP,IAAtC,WAAoD,KAAKG,OAAL,CAAaC,GAAjE,CAF/B,QAEUI,OAFV,+CAIWA,OAAO,CAACC,IAAR,EAJX,6D,+LAOA,kBAAiBC,UAAjB,yJAE0BH,CAAAA,KAAK,wCAAiC,KAAKP,IAAtC,aAA8CU,UAA9C,aAAoE,KAAKP,OAAL,CAAaC,GAAjF,CAF/B,QAEUI,OAFV,iDAIWA,OAAO,CAACC,IAAR,EAJX,+D,iOAOA,kBAA8BC,UAA9B,CAA0CC,MAA1C,yJAC0BJ,CAAAA,KAAK,wCAAiC,KAAKP,IAAtC,aAA8CU,UAA9C,qBAAoEC,MAApE,EAA8E,KAAKR,OAAL,CAAaC,GAA3F,CAD/B,QACUI,OADV,iDAGWA,OAAO,CAACC,IAAR,EAHX,+D,qPAMA,kBAAkBC,UAAlB,sLAC+B,MAAKE,uBAAL,CAA6BF,UAA7B,CAAyC,sBAAzC,CAD/B,QACUG,YADV,gBAEUC,eAFV,CAE4BD,YAAY,CAACE,MAAb,CAAoBC,IAApB,CAAyBC,GAFrD,CAII;AAJJ,uBAK0BV,CAAAA,KAAK,wCAAiC,KAAKP,IAAtC,aAA8CU,UAA9C,uBAAsEI,eAAtE,EAAyF,KAAKX,OAAL,CAAaC,GAAtG,CAL/B,QAKUI,OALV,iDAOWA,OAAO,CAACC,IAAR,EAPX,+D,6MAUA,kBAAkBC,UAAlB,CAA8BQ,IAA9B,yJAC0BX,CAAAA,KAAK,wCAAiC,KAAKP,IAAtC,aAA8CU,UAA9C,sBAAqEQ,IAArE,EAA6E,KAAKf,OAAL,CAAaC,GAA1F,CAD/B,QACUI,OADV,iDAGWA,OAAO,CAACC,IAAR,EAHX,+D,+HAOJ,cAAeX,CAAAA,aAAf","sourcesContent":["class GithubAPICore {\n    user;\n    auth = {Authorization: \"\"};\n    methods = {\n        GET: {\n            method: \"GET\",\n        },\n        POST: {\n            method: \"POST\",\n        }\n    }\n\n    constructor(token, user) {\n        this.auth.Authorization = token;\n        this.user = user;\n    }\n\n    async getRepos() {\n        // const promise = await fetch(\"https://api.github.com/users/\" + this.user + \"/repos\", this.methods.GET);\n        const promise = await fetch(`https://api.github.com/users/${this.user}/repos`, this.methods.GET);\n\n        return promise.json();\n    }\n\n    async getCommits(repository) {\n        // const promise = await fetch(\"https://api.github.com/repos/LoweloDev/\" + repository + \"/commits\", this.methods.GET);\n        const promise = await fetch(`https://api.github.com/repos/${this.user}/${repository}/commits`, this.methods.GET);\n\n        return promise.json();\n    }\n\n    async getLatestCommitOfBranch(repository, branch) {\n        const promise = await fetch(`https://api.github.com/repos/${this.user}/${repository}/commits/${branch}`, this.methods.GET);\n\n        return promise.json();\n    }\n\n    async getFileTree(repository) {\n        const latestCommit = await this.getLatestCommitOfBranch(repository, \"university_protected\");\n        const latestCommitSha = latestCommit.commit.tree.sha;\n\n        // https://api.github.com/repos/{username}/{repoName}/trees/{latestCommitSha}\n        const promise = await fetch(`https://api.github.com/repos/${this.user}/${repository}/git/trees/${latestCommitSha}`, this.methods.GET);\n\n        return promise.json();\n    }\n\n    async getContents(repository, path) {\n        const promise = await fetch(`https://api.github.com/repos/${this.user}/${repository}/contents/${path}`, this.methods.GET);\n\n        return promise.json();\n    }\n}\n\nexport default GithubAPICore;\n"]},"metadata":{},"sourceType":"module"}